// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MetaKey is an object representing the database table.
type MetaKey struct {
	ID      int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	KeyName string `boil:"key_name" json:"key_name" toml:"key_name" yaml:"key_name"`

	R *metaKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metaKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetaKeyColumns = struct {
	ID      string
	KeyName string
}{
	ID:      "id",
	KeyName: "key_name",
}

var MetaKeyTableColumns = struct {
	ID      string
	KeyName string
}{
	ID:      "meta_key.id",
	KeyName: "meta_key.key_name",
}

// Generated where

var MetaKeyWhere = struct {
	ID      whereHelperint64
	KeyName whereHelperstring
}{
	ID:      whereHelperint64{field: "\"meta_key\".\"id\""},
	KeyName: whereHelperstring{field: "\"meta_key\".\"key_name\""},
}

// MetaKeyRels is where relationship names are stored.
var MetaKeyRels = struct {
	Meta string
}{
	Meta: "Meta",
}

// metaKeyR is where relationships are stored.
type metaKeyR struct {
	Meta MetumSlice `boil:"Meta" json:"Meta" toml:"Meta" yaml:"Meta"`
}

// NewStruct creates a new relationship struct
func (*metaKeyR) NewStruct() *metaKeyR {
	return &metaKeyR{}
}

func (r *metaKeyR) GetMeta() MetumSlice {
	if r == nil {
		return nil
	}
	return r.Meta
}

// metaKeyL is where Load methods for each relationship are stored.
type metaKeyL struct{}

var (
	metaKeyAllColumns            = []string{"id", "key_name"}
	metaKeyColumnsWithoutDefault = []string{"key_name"}
	metaKeyColumnsWithDefault    = []string{"id"}
	metaKeyPrimaryKeyColumns     = []string{"id"}
	metaKeyGeneratedColumns      = []string{"id"}
)

type (
	// MetaKeySlice is an alias for a slice of pointers to MetaKey.
	// This should almost always be used instead of []MetaKey.
	MetaKeySlice []*MetaKey
	// MetaKeyHook is the signature for custom MetaKey hook methods
	MetaKeyHook func(context.Context, boil.ContextExecutor, *MetaKey) error

	metaKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metaKeyType                 = reflect.TypeOf(&MetaKey{})
	metaKeyMapping              = queries.MakeStructMapping(metaKeyType)
	metaKeyPrimaryKeyMapping, _ = queries.BindMapping(metaKeyType, metaKeyMapping, metaKeyPrimaryKeyColumns)
	metaKeyInsertCacheMut       sync.RWMutex
	metaKeyInsertCache          = make(map[string]insertCache)
	metaKeyUpdateCacheMut       sync.RWMutex
	metaKeyUpdateCache          = make(map[string]updateCache)
	metaKeyUpsertCacheMut       sync.RWMutex
	metaKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metaKeyAfterSelectHooks []MetaKeyHook

var metaKeyBeforeInsertHooks []MetaKeyHook
var metaKeyAfterInsertHooks []MetaKeyHook

var metaKeyBeforeUpdateHooks []MetaKeyHook
var metaKeyAfterUpdateHooks []MetaKeyHook

var metaKeyBeforeDeleteHooks []MetaKeyHook
var metaKeyAfterDeleteHooks []MetaKeyHook

var metaKeyBeforeUpsertHooks []MetaKeyHook
var metaKeyAfterUpsertHooks []MetaKeyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetaKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetaKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetaKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetaKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetaKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetaKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetaKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetaKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetaKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetaKeyHook registers your hook function for all future operations.
func AddMetaKeyHook(hookPoint boil.HookPoint, metaKeyHook MetaKeyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metaKeyAfterSelectHooks = append(metaKeyAfterSelectHooks, metaKeyHook)
	case boil.BeforeInsertHook:
		metaKeyBeforeInsertHooks = append(metaKeyBeforeInsertHooks, metaKeyHook)
	case boil.AfterInsertHook:
		metaKeyAfterInsertHooks = append(metaKeyAfterInsertHooks, metaKeyHook)
	case boil.BeforeUpdateHook:
		metaKeyBeforeUpdateHooks = append(metaKeyBeforeUpdateHooks, metaKeyHook)
	case boil.AfterUpdateHook:
		metaKeyAfterUpdateHooks = append(metaKeyAfterUpdateHooks, metaKeyHook)
	case boil.BeforeDeleteHook:
		metaKeyBeforeDeleteHooks = append(metaKeyBeforeDeleteHooks, metaKeyHook)
	case boil.AfterDeleteHook:
		metaKeyAfterDeleteHooks = append(metaKeyAfterDeleteHooks, metaKeyHook)
	case boil.BeforeUpsertHook:
		metaKeyBeforeUpsertHooks = append(metaKeyBeforeUpsertHooks, metaKeyHook)
	case boil.AfterUpsertHook:
		metaKeyAfterUpsertHooks = append(metaKeyAfterUpsertHooks, metaKeyHook)
	}
}

// One returns a single metaKey record from the query.
func (q metaKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetaKey, error) {
	o := &MetaKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for meta_key")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetaKey records from the query.
func (q metaKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetaKeySlice, error) {
	var o []*MetaKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MetaKey slice")
	}

	if len(metaKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetaKey records in the query.
func (q metaKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count meta_key rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metaKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if meta_key exists")
	}

	return count > 0, nil
}

// Meta retrieves all the metum's Meta with an executor.
func (o *MetaKey) Meta(mods ...qm.QueryMod) metumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"meta\".\"meta_key_id\"=?", o.ID),
	)

	return Meta(queryMods...)
}

// LoadMeta allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (metaKeyL) LoadMeta(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaKey interface{}, mods queries.Applicator) error {
	var slice []*MetaKey
	var object *MetaKey

	if singular {
		var ok bool
		object, ok = maybeMetaKey.(*MetaKey)
		if !ok {
			object = new(MetaKey)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaKey)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaKey))
			}
		}
	} else {
		s, ok := maybeMetaKey.(*[]*MetaKey)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaKey)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaKey))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metaKeyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaKeyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`meta`),
		qm.WhereIn(`meta.meta_key_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load meta")
	}

	var resultSlice []*Metum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice meta")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on meta")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta")
	}

	if len(metumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Meta = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &metumR{}
			}
			foreign.R.MetaKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MetaKeyID {
				local.R.Meta = append(local.R.Meta, foreign)
				if foreign.R == nil {
					foreign.R = &metumR{}
				}
				foreign.R.MetaKey = local
				break
			}
		}
	}

	return nil
}

// AddMeta adds the given related objects to the existing relationships
// of the meta_key, optionally inserting them as new records.
// Appends related to o.R.Meta.
// Sets related.R.MetaKey appropriately.
func (o *MetaKey) AddMeta(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Metum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MetaKeyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"meta\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"meta_key_id"}),
				strmangle.WhereClause("\"", "\"", 0, metumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MetaKeyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &metaKeyR{
			Meta: related,
		}
	} else {
		o.R.Meta = append(o.R.Meta, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metumR{
				MetaKey: o,
			}
		} else {
			rel.R.MetaKey = o
		}
	}
	return nil
}

// MetaKeys retrieves all the records using an executor.
func MetaKeys(mods ...qm.QueryMod) metaKeyQuery {
	mods = append(mods, qm.From("\"meta_key\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"meta_key\".*"})
	}

	return metaKeyQuery{q}
}

// FindMetaKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetaKey(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MetaKey, error) {
	metaKeyObj := &MetaKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"meta_key\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, metaKeyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from meta_key")
	}

	if err = metaKeyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metaKeyObj, err
	}

	return metaKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetaKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no meta_key provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metaKeyInsertCacheMut.RLock()
	cache, cached := metaKeyInsertCache[key]
	metaKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metaKeyAllColumns,
			metaKeyColumnsWithDefault,
			metaKeyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, metaKeyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(metaKeyType, metaKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metaKeyType, metaKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"meta_key\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"meta_key\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into meta_key")
	}

	if !cached {
		metaKeyInsertCacheMut.Lock()
		metaKeyInsertCache[key] = cache
		metaKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetaKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetaKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metaKeyUpdateCacheMut.RLock()
	cache, cached := metaKeyUpdateCache[key]
	metaKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metaKeyAllColumns,
			metaKeyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, metaKeyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update meta_key, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"meta_key\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, metaKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metaKeyType, metaKeyMapping, append(wl, metaKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update meta_key row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for meta_key")
	}

	if !cached {
		metaKeyUpdateCacheMut.Lock()
		metaKeyUpdateCache[key] = cache
		metaKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metaKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for meta_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for meta_key")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetaKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"meta_key\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metaKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in metaKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all metaKey")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetaKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no meta_key provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metaKeyUpsertCacheMut.RLock()
	cache, cached := metaKeyUpsertCache[key]
	metaKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			metaKeyAllColumns,
			metaKeyColumnsWithDefault,
			metaKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			metaKeyAllColumns,
			metaKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert meta_key, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metaKeyPrimaryKeyColumns))
			copy(conflict, metaKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"meta_key\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(metaKeyType, metaKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metaKeyType, metaKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert meta_key")
	}

	if !cached {
		metaKeyUpsertCacheMut.Lock()
		metaKeyUpsertCache[key] = cache
		metaKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetaKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetaKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MetaKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metaKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"meta_key\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from meta_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for meta_key")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metaKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no metaKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from meta_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for meta_key")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetaKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metaKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"meta_key\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metaKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from metaKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for meta_key")
	}

	if len(metaKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetaKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetaKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetaKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetaKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"meta_key\".* FROM \"meta_key\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, metaKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MetaKeySlice")
	}

	*o = slice

	return nil
}

// MetaKeyExists checks if the MetaKey row exists.
func MetaKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"meta_key\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if meta_key exists")
	}

	return exists, nil
}
